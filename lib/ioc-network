#!/bin/sh

# used for mac address randomization for VNET jails
__get_next_mac () {
    local _mac_base _mac_offset _calc_mac _mac _mac_postfix

    _mac_base="$(echo $1 | tr '[a-z]' '[A-Z]')"
    _mac_offset="$(echo "obase=16; $2" | bc)"
    _calc_mac=$(echo "obase=16; ibase=16; ${_mac_base} + ${_mac_offset}" | bc)
    _mac_postfix=$(echo ${_calc_mac} | awk '{print substr($0, length($0)-5, length($0))}')
    _mac="${mac_prefix}${_mac_postfix}"

    echo ${_mac}
}

# Expects input: _nic _mac_offset _epair_leg _uuid
# outputs a single mac address
# Example: __validate_mac ${nic} ${_mac_offset} a ${_uuid}
__validate_mac () {
    local _nic _uuid _mac _mac_base _mac_offset \
          _mac_epair_a _mac_epair_b _return

    _nic="$1"
    _mac_offset="$2"
    _epair_leg="$3"
    _uuid="$4"
    _mac="$(__get_jail_prop ${_nic}_mac ${_uuid})"
    _mac_base="$(echo ${_uuid} | awk '{print substr($0, 0, 6)}')"
    _mac_epair_a="$(__get_next_mac ${_mac_base} ${_mac_offset})"
    _mac_epair_b="$(__get_next_mac ${_mac_base} ${_mac_offset}+1)"

    if [ ${_mac} == "none" ] ; then
        __set_jail_prop ${_nic}_mac="${_mac_epair_a},${_mac_epair_b}" ${_uuid}
    fi

    if [ ${_epair_leg} == "a" ] ; then
        _return="$(__get_jail_prop ${_nic}_mac ${_uuid}|cut -f1 -d,)"
    elif [ ${_epair_leg} == "b" ] ; then
        _return="$(__get_jail_prop ${_nic}_mac ${_uuid}|cut -f2 -d,)"
    fi

    echo ${_return}
}

# Expects $1 for action and $2 for UUID
__networking () {
    local _action _uuid _jid _mac_epair_a mac_epair_b \
          _mac_offset

    _action="$1"
    _uuid="$2"
    _jid="$(jls -j ioc-${_uuid} jid)"
    local ip4="$(__get_jail_prop ip4_addr ${_uuid})"
    local ip6="$(__get_jail_prop ip6_addr ${_uuid})"
    local defaultgw="$(__get_jail_prop defaultrouter ${_uuid})"
    local defaultgw6="$(__get_jail_prop defaultrouter6 ${_uuid})"
    local nics="$(__get_jail_prop interfaces ${_uuid} \
               |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }')"
    #local ip4_list="$(echo $ip4 | sed 's/,/ /g')"
    local ip6_list="$(echo $ip6 | sed 's/,/ /g')"

    # Get the default and current interfaces specified
    local default_iface="$(netstat -f inet -nrW | grep '^default' |\
                awk '{ print $6 }')"
    local cur_ip4_iface=$(echo "$ip4_addr" | cut -d '|' -f 1)
    local cur_ip6_iface=$(echo "$ip6_addr" | cut -d '|' -f 1)

    # Change the DEFAULT tag to correct iface
    nics=$(echo $nics | sed "s/DEFAULT/$default_iface/g")

    if [ ${_action} == "start" ] ; then
        _mac_offset=0
        for i in $nics ; do
            local nic=$(echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }')
            local bridge=$(echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }')
            local memberif=$(ifconfig $bridge | grep member | head -n1 | cut -d' ' -f2)
            local brmtu=$(ifconfig $memberif | head -n1 |cut -d' ' -f6)
            epair_a=$(ifconfig epair create)
            epair_b=$(echo $epair_a | sed s/a\$/b/)
            ifconfig ${epair_a} name ${nic}:${_jid} mtu $brmtu
            _mac_epair_a="$(__validate_mac ${nic} ${_mac_offset} a ${_uuid})"
            ifconfig ${nic}:${_jid} link ${_mac_epair_a}
            ifconfig ${nic}:${_jid} description "associated with jail: ${_uuid}"
            ifconfig $epair_b vnet ioc-${2}
            jexec ioc-${2} ifconfig $epair_b name $nic mtu $brmtu
            _mac_epair_b="$(__validate_mac ${nic} ${_mac_offset} b ${_uuid})"
            jexec ioc-${2} ifconfig ${nic} link ${_mac_epair_b}
            ifconfig $bridge addm ${nic}:${_jid} up
            ifconfig ${nic}:${_jid} up
            let _mac_offset="_mac_offset + 2" > /dev/null
        done
        echo "$ip4_addr" | grep -q "AUTOIP4"
        if [ "$ip4" != "none" -a $? -ne 0 ] ; then
            local oIFS=$IFS
            local IFS=","
            for i in $ip4 ; do
                local IFS=$oIFS
                iface=$(echo $i |awk 'BEGIN { FS = "|" } ; { print $1 }' | sed "s/DEFAULT/$default_iface/g")
                ip="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $2 }')"
                jexec ioc-${2} ifconfig $iface $ip up
                local IFS=","
            done
            local IFS=$oIFS
        fi

        if [ "$ip6" != "none" ] ; then
            for i in $ip6_list ; do
                iface=$(echo $i |awk 'BEGIN { FS = "|" } ; { print $1 }' | sed "s/DEFAULT/$default_iface/g")
                ip="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $2 }')"
                jexec ioc-${2} ifconfig $iface inet6 $ip up
            done
        fi

        if [ "$defaultgw" != "none" ] ; then
            jexec ioc-${2} route add default $defaultgw > /dev/null
        fi

        if [ "$defaultgw6" != "none" ] ; then
            jexec ioc-${2} route add -6 default "${defaultgw6}" >/dev/null
        fi

        # Check if the user specified they wanted to use an automatic IP4 address
        echo "$ip4_addr" | grep -q "AUTOIP4"
        if [ $? -eq 0 ] ; then
            __get_autoip4

            if [ -z "$cur_ip4_iface" -o "$cur_ip4_iface" == "DEFAULT" ] ; then
               new_iface="$default_iface"
               __set_jail_prop "ip4_addr=DEFAULT|${auto_ip4}" $_uuid
            else
               new_iface="$cur_ip4_iface"
               __set_jail_prop "ip4_addr=$new_iface|${auto_ip4}" $_uuid
            fi
            jexec ioc-${2} ifconfig $new_iface ${auto_ip} up
        fi
    fi

    if [ ${_action} == "stop" ] ; then
        for if in $nics ; do
            local nic="$(echo $if | cut -f 1 -d:)"
            ifconfig ${nic}:${_jid} destroy
        done
    fi
}

__get_autoip4 () {
     local _autobase _autostart _autoend _autoip _freeip
     unset _auto_ip4
     _autobase=$(netstat -f inet -nrW | grep '^default' |\
               awk '{ print $2 }' | cut -d '.' -f 1-3)
     _autostart=$(__get_jail_prop ip4_autostart default)
     _autoend=$(__get_jail_prop ip4_autoend default)
     _autosubnet=$(__get_jail_prop ip4_autosubnet default)
     local jails=$(__find_jail ALL)

     # Do some basic sanity checking
     if [ -z "$_autostart" ] ; then
        echo "ERROR: AUTOIP4 is specified, but ip4_autostart is not set!"
        exit 1
     fi
     if [ -z "$_autoend" ] ; then
        echo "ERROR: AUTOIP4 is specified, but ip4_autoend is not set!"
        exit 1
     fi
     if [ -z "$_autosubnet" -o "$_autosubnet" = "none" ] ; then
	_autosubnet="24"
     fi

     # Now loop through all the jails, and find a free IP we can use
     # that fits within the autostart/autoend ranges
     _autoip=$_autostart
     while :
     do
        _freeip="YES"
        _nextaddr="${_autobase}.${_autoip}"
        # Is this address in use?
        for jail in $jails ; do
            local juuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid\
                        $jail)
            local jip4="$(__get_jail_prop ip4_addr ${juuid})"
            jip4=$(echo $jip4 | cut -d '|' -f 2 | cut -d '/' -f 1)
            if [ "$jip4" = "$_nextaddr" ] ; then
                _freeip="NO"
                break
            fi
        done

        # On to the next entry to try
        if [ "$_freeip" = "NO" ] ; then
            _autoip=$(expr $_autoip + 1)
            continue
        fi

        # Sanity check
        if [ $_autoip -gt $_autoend ] ; then
            echo "ERROR: IP4 Automatic Address exhaustion"
            exit 1
        fi
        if [ $_autoip -gt 254 ] ; then
            echo "ERROR: IP4 Address outside of bounds"
            exit 1
        fi
        break
     done

     # Set our new ip address
     auto_ip4="$_nextaddr/$_autosubnet"
}

__stop_legacy_networking () {
    local name="$1"

    local ip4_addr="$(__get_jail_prop ip4_addr $name)"
    local ip6_addr="$(__get_jail_prop ip6_addr $name)"

    # Get the default and current interfaces specified
    local default_iface="$(netstat -f inet -nrW | grep '^default' |\
                awk '{ print $6 }')"

    # Change the DEFAULT tag to correct iface
    ip4_addr=$(echo $ip4_addr | sed "s/DEFAULT|/$default_iface|/g")
    ip6_addr=$(echo $ip6_addr | sed "s/DEFAULT|/$default_iface|/g")

    if [ "$ip4_addr" != "none" ] ; then
        local oIFS=$IFS
        local IFS=','
        for ip in $ip4_addr ; do
            local iface="$(echo $ip | \
                         awk 'BEGIN { FS = "|" } ; { print $1 }')"
            local ip4="$(echo $ip | \
                       awk 'BEGIN { FS = "|" } ; { print $2 }' | \
                       awk 'BEGIN { FS = "/" } ; { print $1 }')"

            ifconfig $iface $ip4 -alias
        done
        local IFS=$oIFS
    fi

    if [ "$ip6_addr" != "none" ] ; then
        local oIFS=$IFS
        local IFS=','
        for ip6 in $ip6_addr ; do
            local iface="$(echo $ip6 | \
                         awk 'BEGIN { FS = "|" } ; { print $1 }')"
            local ip6="$(echo $ip6 | \
                       awk 'BEGIN { FS = "|" } ; { print $2 }' | \
                       awk 'BEGIN { FS = "/" } ; { print $1 }')"
            ifconfig $iface inet6 $ip6 -alias
        done
        local IFS=$oIFS
    fi
}

# random integer interface generator
#   __random_integer e4 -> 2**4
#   __random_integer e8 -> 2**8
#   __random_integer e16 -> 2**16
#   __random_integer e32 -> 2**32
#   __random_integer -> 2**8
__random_integer() {
  local limit
  limit=${1}
  case "${limit}"
  in
    e4|16) __random_integer_e4;;
    e8|256) __random_integer_e8;;
    e16|65536) __random_integer_e16;;
    e32|4294967296) __random_integer_e32;;
    *) __random_integer e8;;
  esac
}

# 4bits decimal random number generator (0 -> 15)
__random_integer_e4() {
  jot -r 1 0 15
}

# 8bits decimal random number generator (0 -> 255)
__random_integer_e8() {
  jot -r 1 0 255
}

# 16bits decimal random number generator (0 -> 65535) 
__random_integer_e16() {
  jot -r 1 0 65535
}

# 32bits decimal random number generator (0 -> 4294967295)
__random_integer_e32() {
  jot -r 1 0 4294967295
}

# 64bits decimal random number generator (0 -> 18446744073709551615)
__random_integer_e64() {
  jot -r 1 0 18446744073709551615
}

######################################################################
# mac address support
#  http://standards.ieee.org/develop/regauth/tut/macgrp.pdf
#  /events/automotive/2014/18_Looming_Ethernet_MAC_Address_Crisis.pdf+
######################################################################
__random_mac() {
  __random_mac48
}

__random_mac48() {
  jot -r -s: -w%0.2x 6 0 255
}

__random_mac64() {
  jot -r -s: -w%0.2x 8 0 255
}

# iana assignment see:
#   https://www.iana.org/assignments/ethernet-numbers/
__random_mac48_iana_unicast() {}

__random_mac48_iana_unicast_vrrp4() {
  printf -- '00:00:5e:00:01:%s\n' $(jot -rw%0.2x 1 0 255)
}

__random_mac48_iana_unicast_vrrp6() {
  printf -- '00:00:5e:00:02:%s\n' $(jot -rw%0.2x 1 0 255)
}

__random_mac48_iana_unicast_packetetha() {
  printf -- '00:00:5e:00:52:00\n'
}

__random_mac48_iana_unicast_packetethb() {
  printf -- '00:00:5e:00:52:01\n'
}

__random_mac48_iana_unicast_proxymobile6() {}

__random_mac48_iana_unicast_documentation() {}

__random_mac48_iana_unicast_trill() {}

__random_mac48_iana_unicast_unassigned() {
  case $(jot -r 1 0 4) 
  in
    0) __random_mac48_iana_unicast_unassigned_range0;;
    1) __random_mac48_iana_unicast_unassigned_range1;;
    2) __random_mac48_iana_unicast_unassigned_range2;;
    3) __random_mac48_iana_unicast_unassigned_range3;;
    4) __random_mac48_iana_unicast_unassigned_range4;;
  esac
}

__random_mac48_iana_unicast_unassigned_range0() {
  printf -- '00:00:5e:00:%s:%s' \
    $(jot -rw%0.2x 1 3 81) $(jot -rw%0.2x 1 0 255)
}

__random_mac48_iana_unicast_unassigned_range1() {
  printf -- '00:00:5e:00:52:%s' $(jot -rw%0.2x 1 0 12)
}

__random_mac48_iana_unicast_unassigned_range2() {
  local a
  a=$(jot -rw%0.2x 1 0 144)
  case ${a}
  in
    00) printf -- "00:00:5e:00:%s:%s" $(jot -rw%0.2x 1 84 255) \
                  $(jot -rw%0.2x 0 255);;
    *) printf -- "00:00:5e:%s:%s" ${a} $(jot -rs: -w%0.2x 2 0 255);;
  esac
}

__random_mac48_iana_unicast_unassigned_range3() {
  printf -- '00:00:5e:90:01:%s' $(jot -rw%0.2x 1 1 255)
}

__random_mac48_iana_unicast_unassigned_range4() {
  local a
  a=$(jot -rw%0.2x 1 144 255)
  case ${a}
  in
    90) printf -- '00:00:5e:90:%s:%s' $(jot -rw%0.2x 1 2 255) \
                  $(jot -rw%0.2x 1 0 255);;
    *) printf -- '00:00:5e:%s:%s' ${a} $(jot -rs: -w%0.2x 2 0 255);;
  esac
}

__random_mac48_local_unicast() {
  local _oui _id

  # OUI part (2**6 value)
  _oui=$(jot -r 1 0 63) 

  # local bit (1) and multicast bit (0), add 2 after shift
  _id=$(((_oui<<2)+2)) 
  printf -- '%0.2x:%s\n' "${_id}" $(jot -rs: -w%0.2x 5 0 255)
}

__random_mac48_local_unicast_pair() {
  local _mac _lbyte
  _mac=$(__random_mac48_local_unicast | sed 's/:..$//')
  _lbyte=$(jot -r 1 0 255)
  printf -- '%s:%0.2x %s:%0.2x\n' \
    ${_mac} ${_lbyte} \
    ${_mac} $(((${_lbyte}+1)%255))
}

__random_mac48_local_multicast() {
  local _oui _id

  # OUI part (2**6 value)
  _oui=$(jot -r 1 0 63) # OUI part (2**6 value)

  # local bit set to 1 and multicast bit set to 1, add 3 after shift
  _id=$(((_oui<<2)+3))
  printf -- '%0.2x:%s\n' "${_id}" $(jot -rs: -w%0.2x 5 0 255)
}

__random_mac48_local_multicast_pair() {
  local _mac _lbyte
  _mac=$(__random_mac48_local_multicast | sed 's/:..$//')
  _lbyte=$(jot -r 1 0 255)
  printf -- '%s:%0.2x %s:%0.2x\n' \
    ${_mac} ${_lbyte} \
    ${_mac} $(((${_lbyte}+1)%255))
}

######################################################################
# ip4 address support
######################################################################
__random_ip4() {
  jot -r -s: -w%i 4 0 255
}

__random_ip4_public() {
  case $(jot -r 1 0 4)
  in
    0) __random_ip4_public_range0;;
    1) __random_ip4_public_range1;;
    2) __random_ip4_public_range2;;
    3) __random_ip4_public_range3;;
    4) __random_ip4_public_range4;;
  esac
  echo
}

# 0.0.0.0 -> 9.255.255.255
__random_ip4_public_range0() {
  printf -- '%s.%s' $(jot -r 1 0 9) $(jot -rs. 3 0 255)
}

# 11.0.0.0 -> 126.255.255.255
__random_ip4_public_range1() {
  printf -- '%s.%s' $(jot -r 1 11 126) $(jot -rs. 3 0 255)
}

# 128.0.0.0 -> 171.255.255.255
__random_ip4_public_range2() {
  printf -- '%s.%s' $(jot -r 1 128 171) $(jot -rs. 3 0 255)
}

# 172.32.0.0 -> 192.167.255.255
__random_ip4_public_range3() {
  local a
  a=$(jot -r 1 172 192)
  if [ ${a} -eq 172 ]
  then
    printf -- '%s.%s.%s' ${a} $(jot -r 1 32 255) $(jot -rs. 2 0 255)
  elif [ ${a} -eq 192 ]
  then
    printf -- '%s.%s.%s' ${a} $(jot -r 1 0 167) $(jot -rs. 2 0 255)
  else
    printf -- '%s.%s' ${a} $(jot -rs. 3 0 255)
  fi
}

# 192.169.0.0 -> 223.255.255.255
__random_ip4_public_range4() {
  local a
  a=$(jot -r 1 192 223)
  if [ ${a} -eq 192 ]
  then
    printf -- '%s.%s.%s' ${a} $(jot -r 1 169 255) $(jot -rs. 2 0 255)
  else
    printf -- '%s.%s' ${a} $(jot -rs. 3 0 255)
  fi
}

__random_ip4_loopback() {
  printf -- '127.%s\n' $(jot -rs. -w%i 3 0 255)
}

__random_ip4_private() {
  case $(jot -r 1 0 2)
  in
    0) __random_ip4_private_10;;
    1) __random_ip4_private_172;;
    2) __random_ip4_private_192;;
  esac
}

__random_ip4_private_10() {
  printf -- '10.%s\n' $(jot -rs. -w%i 3 0 255)
}

__random_ip4_private_172() {
  local first second
  first=$(jot -rs. -w%i 1 0 31)
  second=$(jot -rs. -w%i 2 0 255)
  printf -- '172.%s.%s\n' "${first}" "${second}"
}

__random_ip4_private_192() {
  printf -- '192.168.%s\n' $(jot -rs. -w%i 2 0 255)
}

# __random_ip4_multicast() {}

######################################################################
# ip6 address support
######################################################################
__random_ip6() {
  jot -rs: -w%0.4x 8 0 65535
}

# __random_ip6_anycast() {}
# __random_ip6_multicast() {}

# https://www.rfc-editor.org/rfc/rfc4193.txt
__random_ip6_private() {
  printf -- "fd%0.2x:%s\n" $(jot -r 1 0 255) \
            $(jot -rs: -w%0.2x 7 0 65535)
}

######################################################################
# command wrappers
######################################################################
__ifconfig_wrapper() {
  local cmd
  eval ifconfig ${cmd}
}

# __netstat_wrapper() { }

__create_epair() {
  local _ret _epair _mac_pair
  #_ret=$(ifconfig epair create)
  _ret="epair0a"
  _epair="${_ret} ${_ret%a}b"
  _mac_pair=$(__random_mac48_local_unicast_pair)
  __zip_callback "${_epair}" "${_mac_pair}" __netif_mac_address
  __zip_callback "${_epair}" "${_mac_pair}" __netif_description
}

__zip() {
  __zip_callback "${1}" "${2}" echo
}

__zip_callback() {
  local _a _b _counter _zip _callback
  _a="${1}"
  _b="${2}"
  _callback="${3}"

  if [ $(echo "${_a}"|wc -w) -ne $(echo "${_b}"|wc -w) ]
  then
    return 1
  fi

  while [ "${_a}" ] && [ "${_b}" ]
  do
    _zip=$(__head $_a)
    _zip="${_zip} $(__head $_b)"
    _a=$(__tail ${_a})
    _b=$(__tail ${_b})
    if [ "${_callback}" ]
    then
      eval ${_callback} ${_zip}
    fi
  done
}

__head() {
  echo "${1}"
}

__tail() {
  shift
  echo "${*}"
}

__netif_mac_address () {
  local _netif _mac
  _netif=${1}
  _mac=${2}
  echo ifconfig "${_netif}" ether "${_mac}"
}

__netif_description() {
  local _netif _description
  _netif=${1}
  _description=${2}
  echo ifconfig "${_netif}" description "${_description}"
}

__netif_jail() {
  local _netif _jail
  _netif=${1}
  _jail=${2}
  echo ifconfig "${_netif}" vnet "${_jail}"
}

__create_bridge() {
  local ret
  ret=$(ifconfig bridge create)
  echo ${ret}
}

__create_vlan() {
  local ret
  ret=$(ifconfig vlan create)
  echo ${ret}
}

__create_vxlan() {
  local ret
  ret=$(ifconfig vxlan create)
  echo ${ret}
}
